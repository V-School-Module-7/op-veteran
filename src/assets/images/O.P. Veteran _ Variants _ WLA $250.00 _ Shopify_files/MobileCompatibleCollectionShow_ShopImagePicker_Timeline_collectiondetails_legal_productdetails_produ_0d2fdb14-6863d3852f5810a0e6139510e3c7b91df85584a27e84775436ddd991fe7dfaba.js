(self.webpackJsonp=self.webpackJsonp||[]).push([["MobileCompatibleCollectionShow~ShopImagePicker~Timeline~collectiondetails~legal~productdetails~produ~0d2fdb14"],{"./app/components/ImageUploader/ImageUploader.tsx":function(e,a,i){"use strict";var t=i("./node_modules/lodash/isEqual.js"),s=i.n(t),n=i("./node_modules/react/index.js"),d=i.n(n),r=i("./node_modules/@shopify/network/build/esnext/network.esnext"),l=i("./node_modules/@shopify/react-i18n/build/esnext/decorator.esnext"),o=i("./node_modules/@shopify/react-compose/build/esnext/index.esnext"),m=i("./packages/@web-utilities/error/decorators.tsx"),p=i("./packages/@web-utilities/graphql/query.ts"),u=i("./packages/@web-utilities/string/index.ts"),c=i("./app/utilities/validate-media/validate-image.ts"),g=i("./app/utilities/validate-media/types.ts"),v=i("./app/types/graphql/core-types/StagedUploadHttpMethodType.ts"),y=i("./app/components/MediaUploader/MediaUploader.tsx"),f=JSON.parse('{"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UploadImages"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"StagedUploadInput"}}}}},"directives":[]}],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"stagedUploadsCreate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"stagedTargets"},"arguments":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"resourceUrl"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"parameters"},"arguments":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"value"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"__typename"},"arguments":[],"directives":[]}]}},{"kind":"Field","name":{"kind":"Name","value":"__typename"},"arguments":[],"directives":[]}]}},{"kind":"Field","name":{"kind":"Name","value":"userErrors"},"arguments":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"field"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"message"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"__typename"},"arguments":[],"directives":[]}]}},{"kind":"Field","name":{"kind":"Name","value":"__typename"},"arguments":[],"directives":[]}]}}]}}],"loc":{"start":0,"end":208,"source":{"body":"mutation UploadImages($input:[StagedUploadInput!]!){stagedUploadsCreate(input:$input){stagedTargets{url resourceUrl parameters{name value __typename}__typename}userErrors{field message __typename}__typename}}","name":"GraphQL request","locationOffset":{"line":1,"column":1}}},"id":"dc75671b7f3f747e9112582d8d5d60508c4a4e0097f4ac6c8a120f4a551fe55d"}');class M extends d.a.PureComponent{componentDidMount(){this.performUpload()}componentDidUpdate({images:e}){s()(this.props.images,e)||this.performUpload()}render(){return null}async performUpload(){const{images:e,onAllImagesUploaded:a}=this.props;if(0===e.length)return;const i=await this.uploadImages(e);a&&a(i)}async uploadImages(e){let a=[];const{validImages:i,errors:t}=await this.validateImages(e);a=a.concat(t);const{stagedImages:s,errors:n}=await this.stageImages(i);a=a.concat(n);const{uploadedImages:d,errors:r}=await this.finalUploadImages(s);return[].concat(t,n,r,d)}async validateImages(e){const{validate:a,onImageUploaded:i}=this.props;if(a){const a=await Promise.all(e.map((async e=>{const a=await this.validateImage(e);if(a){const t={media:e,status:y.a.ValidationFailed,error:a};return i&&i(t),t}return e})));return{errors:a.filter((e=>void 0!==e.media)),validImages:a.filter((e=>void 0===e.media))}}return{errors:[],validImages:e}}async validateImage(e){const{i18n:a}=this.props,{name:i}=e,{status:t}=await Object(c.c)(e,{maxFileSize:c.a.maxFileSizeInBytes,maxResolutionInMegapixels:c.a.maxMegapixels,validMimeTypes:c.a.validMimeTypes});let s=null;switch(t){case g.a.Valid:break;case g.a.CorruptedFile:s=a.translate("Common.validation.fileUnsupportedOrCorruptedError",{fileName:i,validImageTypes:c.a.validExtensions.join(", ")});break;case g.a.ExceedsMaximumDimensions:s=a.translate("Common.validation.fileExceedsMaxMegapixels",{fileName:i,maxMegapixels:c.a.maxMegapixels});break;case g.a.ExceedsMaximumSize:s=a.translate("Common.validation.fileSizeErrorMb",{fileName:i,maximumMegabytes:c.a.maxFileSizeInMegabytes});break;case g.a.InvalidImageFileType:s=a.translate("Common.validation.imageTypeError",{fileName:i,validImageTypes:c.a.validExtensions.join(", ")})}return s}async stageImages(e){if(0===e.length)return{errors:[],stagedImages:[]};const{uploadImages:a,resource:i,onImageUploaded:t}=this.props,{data:{stagedUploadsCreate:s}}=await a({variables:{input:e.map((e=>({filename:e.name,mimeType:e.type,resource:i,fileSize:String(e.size),httpMethod:v.a.Post})))}});if(null==s||s.userErrors.length>0||null==s.stagedTargets){const a=e.map((e=>({media:e,status:y.a.StagedUploadFailed})));return t&&a.forEach((e=>t(e))),{errors:a,stagedImages:[]}}return s.stagedTargets.map(((a,i)=>{if(null==(null==a?void 0:a.url)){const a={media:e[i],status:y.a.StagedUploadFailed};return t&&t(a),a}return{stagedUploadResult:a,media:e[i]}})).reduce(((e,a)=>(function(e){return void 0!==e.status}(a)&&e.errors.push(a),function(e){return void 0===e.status}(a)&&e.stagedImages.push(a),e)),{errors:[],stagedImages:[]})}async finalUploadImages(e){const{onImageUploaded:a}=this.props,i=await Promise.all(e.map((async({stagedUploadResult:e,media:i})=>{try{const{parameters:t}=e,s=new FormData;t.forEach((({name:e,value:a})=>{s.append(e,a)}));const n=Object(u.e)(i.name);s.append("file",i,n);const d=await fetch(e.url,{method:r.c.Post,body:s});if(d.ok){const t=await this.getImageKeyFromAWSResponse(d),s=new URL(e.url);s.pathname=t||"";const n={media:i,status:y.a.Success,path:s.href};return a&&a(n),n}this.props.errorLogger.notify(new Error("Failed to upload image to AWS"),{severity:"error",metaData:{response:await d.text(),responseCode:d.status,component:"ImageUploader"}});const l={media:i,status:y.a.FinalUploadFailed};return a&&a(l),l}catch(t){this.props.errorLogger.notify(t,{severity:"error",metaData:{description:"Unhandled error while uploading image to AWS",component:"ImageUploader"}});const e={media:i,status:y.a.FinalUploadFailed};return a&&a(e),e}})));return{errors:i.filter((e=>e.status===y.a.FinalUploadFailed)),uploadedImages:i.filter((e=>e.status===y.a.Success))}}getImageKeyFromAWSResponse(e){return e.text().then((e=>(new DOMParser).parseFromString(e,"text/xml"))).then((e=>e.getElementsByTagName("Key")[0].textContent))}}a.a=Object(o.a)(Object(p.i)(f,{name:"uploadImages"}),Object(l.a)(),Object(m.a)())(M)},"./app/components/MediaUploader/MediaUploader.tsx":function(e,a,i){"use strict";i.d(a,"a",(function(){return k}));var t=i("./node_modules/lodash/isEqual.js"),s=i.n(t),n=i("./node_modules/react/index.js"),d=i.n(n),r=i("./node_modules/@shopify/mime-types/dist/src/index.js"),l=i("./node_modules/@shopify/network/build/esnext/network.esnext"),o=i("./node_modules/@shopify/react-compose/build/esnext/index.esnext"),m=i("./packages/@web-utilities/graphql/query.ts"),p=i("./packages/@web-utilities/string/index.ts"),u=i("./app/utilities/validate-media/validate-media.ts"),c=i("./app/utilities/validate-media/validate-image.ts"),g=i("./app/utilities/validate-media/validate-video.ts"),v=i("./app/utilities/validate-media/validate-3d-model.ts"),y=i("./app/utilities/validate-media/types.ts"),f=i("./app/types/graphql/core-types/StagedUploadHttpMethodType.ts"),M=i("./app/types/graphql/core-types/StagedUploadTargetGenerateUploadResource.ts"),x=JSON.parse('{"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UploadMedia"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"StagedUploadInput"}}}}},"directives":[]}],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"stagedUploadsCreate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"stagedTargets"},"arguments":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"resourceUrl"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"parameters"},"arguments":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"value"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"__typename"},"arguments":[],"directives":[]}]}},{"kind":"Field","name":{"kind":"Name","value":"__typename"},"arguments":[],"directives":[]}]}},{"kind":"Field","name":{"kind":"Name","value":"userErrors"},"arguments":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"field"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"message"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"__typename"},"arguments":[],"directives":[]}]}},{"kind":"Field","name":{"kind":"Name","value":"__typename"},"arguments":[],"directives":[]}]}}]}}],"loc":{"start":0,"end":207,"source":{"body":"mutation UploadMedia($input:[StagedUploadInput!]!){stagedUploadsCreate(input:$input){stagedTargets{url resourceUrl parameters{name value __typename}__typename}userErrors{field message __typename}__typename}}","name":"GraphQL request","locationOffset":{"line":1,"column":1}}},"id":"30523ad328a3e5d9d8da2516e473760b5b8c88191ad5698cd9968495881076cd"}');let k;!function(e){e[e.ValidationFailed=0]="ValidationFailed",e[e.StagedUploadFailed=1]="StagedUploadFailed",e[e.FinalUploadFailed=2]="FinalUploadFailed",e[e.Success=3]="Success"}(k||(k={}));class F extends d.a.PureComponent{componentDidMount(){this.performUpload()}componentDidUpdate({media:e}){s()(this.props.media,e)||this.performUpload()}render(){return null}async performUpload(){const{media:e,onAllMediasUploaded:a}=this.props,i=await this.uploadMedias(e);a&&await a(i)}async uploadMedias(e){const{validMedias:a,errors:i}=await this.validateMedias(e),{stagedMedias:t,errors:s}=await this.stageMedias(a),{uploadedMedias:n,errors:d}=await this.finalUploadMedias(t);return[].concat(i,s,d,n)}async validateMedias(e){const{validate:a,onMediaUploaded:i}=this.props;if(a){const a=await Promise.all(e.map((async e=>{const a=await Object(u.a)(e,{imageOptions:{maxFileSize:c.a.maxFileSizeInBytes,maxResolutionInMegapixels:c.a.maxMegapixels,validMimeTypes:c.a.validMimeTypes},videoOptions:{maxFileSize:g.a.maxFileSizeInBytes,validMimeTypes:g.a.validMimeTypes},threedModelOptions:{maxFileSize:v.a.maxFileSizeInBytes,validMimeTypes:v.a.validMimeTypes}});if(a.status===y.a.Valid)return e;const t={media:e,status:k.ValidationFailed,error:a};return i&&i(t),t})));return{errors:a.filter((e=>void 0!==e.media)),validMedias:a.filter((e=>void 0===e.media))}}return{errors:[],validMedias:e}}async stageMedias(e){if(0===e.length)return{errors:[],stagedMedias:[]};const{uploadMedia:a,onMediaUploaded:i}=this.props,t={hasReturnedNull:!1,urls:[],userErrors:[]};let s=!1;try{const i=e.map((e=>{const a=this.getStagedUploadTargetGenerateUploadResource(e);return{filename:Object(p.e)(e.name),mimeType:Object(r.getMimeTypeFromFilename)(e.name)||e.type||"",resource:a,fileSize:e.size.toString(),httpMethod:f.a.Post}})),{data:{stagedUploadsCreate:s}}=await a({variables:{input:i}});null==s?t.hasReturnedNull=!0:(s.stagedTargets&&(t.urls=s.stagedTargets.filter((e=>void 0!==e.url)).map((e=>({url:e.url,resourceUrl:e.resourceUrl,parameters:e.parameters})))),s.userErrors&&(t.userErrors=s.userErrors))}catch{s=!0}if(s||t.hasReturnedNull||t.userErrors.length>0){const a=e.map(((e,a)=>({media:e,status:k.StagedUploadFailed,message:this.getMediaUserErrorMessage(t,a)})));return i&&a.forEach((e=>i(e))),{errors:a,stagedMedias:[]}}return t.urls.reduce(((a,t,s)=>{if(null===t.url){const t={media:e[s],status:k.StagedUploadFailed};i&&i(t),a.errors.push(t)}else a.stagedMedias.push({stagedUploadResult:t,media:e[s]});return a}),{errors:[],stagedMedias:[]})}async finalUploadMedias(e){const a=await Promise.all(e.map((async({stagedUploadResult:e,media:a})=>{try{const i={media:a,status:k.FinalUploadFailed};if(!e.resourceUrl)return this.callOnMediaUploaded(i),i;const t=new FormData;e.parameters.forEach((({name:e,value:a})=>{t.append(e,a)}));const s=Object(p.e)(a.name);t.append("file",a,s);if((await fetch(e.url,{method:l.c.Post,body:t})).ok){const i={media:a,status:k.Success,path:e.resourceUrl};return this.callOnMediaUploaded(i),i}return this.callOnMediaUploaded(i),i}catch(i){const e={media:a,status:k.FinalUploadFailed};return this.callOnMediaUploaded(e),e}})));return{errors:a.filter((e=>e.status===k.FinalUploadFailed)),uploadedMedias:a.filter((e=>e.status===k.Success))}}getStagedUploadTargetGenerateUploadResource({type:e}){return e.startsWith("image/")?M.a.Image:e.startsWith("video/")?M.a.Video:M.a.Model_3D}callOnMediaUploaded(e){this.props.onMediaUploaded&&this.props.onMediaUploaded(e)}getMediaUserErrorMessage(e,a){const i=e.userErrors.find((e=>{if(e.field){if(2===e.field.length)return e.field[1]===a.toString()}return!1}));return null==i?void 0:i.message}}a.b=Object(o.a)(Object(m.i)(x,{name:"uploadMedia"}))(F)},"./app/utilities/validate-media/types.ts":function(e,a,i){"use strict";let t;i.d(a,"a",(function(){return t})),function(e){e.Valid="Valid",e.ExceedsMaximumSize="ExceedsMaximumSize",e.InvalidImageFileType="InvalidImageFileType",e.InvalidVideoFileType="InvalidVideoFileType",e.Invalid3dModelFileType="Invalid3dModelFileType",e.CorruptedFile="CorruptedFile",e.ExceedsMaximumDimensions="ExceedsMaximumDimensions",e.InvalidFileExtension="InvalidFileExtension"}(t||(t={}))},"./app/utilities/validate-media/validate-3d-model.ts":function(e,a,i){"use strict";i.d(a,"a",(function(){return n})),i.d(a,"b",(function(){return d}));var t=i("./node_modules/@shopify/mime-types/dist/src/index.js"),s=i("./app/utilities/validate-media/types.ts");const n={maxFileSizeInBytes:15728640,validExtensions:[".glb"],validMimeTypes:[t.MimeType.Glb]};function d(e,{maxFileSize:a,validMimeTypes:i}){const n=Object(t.getMimeTypeFromFilename)(e.name);return n&&i.includes(n)?e.size>a?{status:s.a.ExceedsMaximumSize,maximumSize:a}:{status:s.a.Valid}:{status:s.a.Invalid3dModelFileType,extensions:i.map(t.getExtensionFromMimeType)}}},"./app/utilities/validate-media/validate-image.ts":function(e,a,i){"use strict";i.d(a,"a",(function(){return n})),i.d(a,"b",(function(){return d})),i.d(a,"c",(function(){return r}));var t=i("./node_modules/@shopify/mime-types/dist/src/index.js"),s=i("./app/utilities/validate-media/types.ts");const n={maxMegapixels:20,maxFileSizeInMegabytes:20,maxFileSizeInBytes:2e7,validExtensions:[".jpg",".gif",".png"],validMimeTypes:[t.MimeType.Png,t.MimeType.Jpeg,t.MimeType.Gif]},d=n.validMimeTypes.join(",");function r(e,{maxFileSize:a,maxResolutionInMegapixels:i,validMimeTypes:n}){return n.some((a=>a.toString()===e.type))?e.size>a?Promise.resolve({status:s.a.ExceedsMaximumSize,maximumSize:a}):function(e,a,i){const n=1e3*a*1e3;return new Promise((d=>{const r=new FileReader;r.onload=e=>{const r=new Image;r.onload=e=>{const{target:r}=e,{width:l,height:o}=r,m=l*o;return m>n?d({status:s.a.ExceedsMaximumDimensions,maxMegapixels:a}):m<=0||isNaN(m)?d({status:s.a.CorruptedFile,extensions:i.map(t.getExtensionFromMimeType)}):void d({status:s.a.Valid})},r.onerror=()=>{d({status:s.a.CorruptedFile,extensions:i.map(t.getExtensionFromMimeType)})},r.src=e.target.result},r.readAsDataURL(e)}))}(e,i,n):Promise.resolve({status:s.a.InvalidImageFileType,extensions:n.map(t.getExtensionFromMimeType)})}},"./app/utilities/validate-media/validate-media.ts":function(e,a,i){"use strict";i.d(a,"a",(function(){return l}));var t=i("./node_modules/@shopify/mime-types/dist/src/index.js"),s=i("./app/utilities/validate-media/validate-3d-model.ts"),n=i("./app/utilities/validate-media/validate-image.ts"),d=i("./app/utilities/validate-media/validate-video.ts"),r=i("./app/utilities/validate-media/types.ts");function l(e,a){const i=e.type||Object(t.getMimeTypeFromFilename)(e.name)||"";if(i.startsWith("image/"))return Object(n.c)(e,a.imageOptions);if(i.startsWith("video/"))return Promise.resolve(Object(d.b)(e,a.videoOptions));if(i.startsWith("model/"))return Promise.resolve(Object(s.b)(e,a.threedModelOptions));const l=[...a.imageOptions.validMimeTypes.map(t.getExtensionFromMimeType),...a.videoOptions.validMimeTypes.map(t.getExtensionFromMimeType),...a.threedModelOptions.validMimeTypes.map(t.getExtensionFromMimeType)];return Promise.resolve({status:r.a.InvalidFileExtension,extensions:l})}},"./app/utilities/validate-media/validate-video.ts":function(e,a,i){"use strict";i.d(a,"a",(function(){return n})),i.d(a,"b",(function(){return d}));var t=i("./node_modules/@shopify/mime-types/dist/src/index.js"),s=i("./app/utilities/validate-media/types.ts");const n={maxFileSizeInGigabytes:1,maxFileSizeInBytes:1073741824,validExtensions:[".mp4",".mov"],validMimeTypes:[t.MimeType.Mp4,t.MimeType.Mov]};function d(e,{maxFileSize:a,validMimeTypes:i}){return i.some((a=>a.toString()===e.type))?e.size>a?{status:s.a.ExceedsMaximumSize,maximumSize:a}:{status:s.a.Valid}:{status:s.a.InvalidVideoFileType,extensions:i.map(t.getExtensionFromMimeType)}}}}]);